{"version":3,"sources":["components/TodoTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplateBlock","styled","div","_templateObject","TodoTemplate","_ref","children","react_default","a","createElement","initialTodos","id","text","done","TodoRecuder","state","action","type","concat","todo","map","Object","objectSpread","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoHeadBlock","TodoHead_templateObject","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","Remove","TodoItem_templateObject","CheckCircle","_templateObject2","props","css","_templateObject3","Text","_templateObject4","_templateObject5","TodoItemBlock","_templateObject6","React","memo","onClick","index_esm","TodoListBlock","TodoList_templateObject","TodoList","todos","components_TodoItem","key","CircleButton","button","TodoCreate_templateObject","open","TodoCreate_templateObject2","InsertFormPositioner","TodoCreate_templateObject3","InsertForm","form","TodoCreate_templateObject4","Input","input","TodoCreate_templateObject5","_useState","useState","_useState2","setOpen","_useState3","_useState4","setValue","useTodoNextId","Fragment","onSubmit","e","preventDefault","current","placeholder","autoFocus","onChange","target","GlobalStyle","createGlobalStyle","App_templateObject","App","components_TodoTemplate","components_TodoHead","components_TodoList","components_TodoCreate","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3fc148d5.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n    width: 512px;\r\n    height: 768px;\r\n\r\n    position: relative;\r\n    background: white;\r\n    border-radius: 16px;\r\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.04);\r\n\r\n    margin: 0 auto;\r\n    margin-top: 96px;\r\n    margin-bottom: 32px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nfunction TodoTemplate({ children }) {\r\n    return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\r\n}\r\n\r\nexport default TodoTemplate;\r\n","import React, { useReducer, createContext, useContext, useRef } from 'react';\r\n\r\nconst initialTodos = [\r\n    {\r\n        id: 1,\r\n        text: '프로젝트 생성하기',\r\n        done: true,\r\n    },\r\n    {\r\n        id: 2,\r\n        text: '컴포넌트 스타일링',\r\n        done: true,\r\n    },\r\n    {\r\n        id: 3,\r\n        text: 'Context 만들기',\r\n        done: false,\r\n    },\r\n    {\r\n        id: 4,\r\n        text: '기능 구현하기',\r\n        done: false,\r\n    },\r\n];\r\n\r\n// 만들 actions\r\n// Create\r\n// Toggle\r\n// Remove\r\n\r\nfunction TodoRecuder(state, action) {\r\n    switch (action.type) {\r\n        case 'CREATE':\r\n            return state.concat(action.todo);\r\n\r\n        case 'TOGGLE':\r\n            return state.map(todo =>\r\n                todo.id === action.id ? { ...todo, done: !todo.done } : todo,\r\n            );\r\n\r\n        case 'REMOVE':\r\n            return state.filter(todo => todo.id !== action.id);\r\n\r\n        default:\r\n            throw new Error(`Unhandled Action type: ${action.type}`);\r\n    }\r\n}\r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\nexport function TodoProvider({ children }) {\r\n    const [state, dispatch] = useReducer(TodoRecuder, initialTodos);\r\n    const nextId = useRef(5);\r\n\r\n    return (\r\n        <TodoStateContext.Provider value={state}>\r\n            <TodoDispatchContext.Provider value={dispatch}>\r\n                <TodoNextIdContext.Provider value={nextId}>\r\n                    {children}\r\n                </TodoNextIdContext.Provider>\r\n            </TodoDispatchContext.Provider>\r\n        </TodoStateContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useTodoState() {\r\n    const context = useContext(TodoStateContext);\r\n    if (!context) {\r\n        throw new Error(`Cannot find TodoProvider`);\r\n    }\r\n    return context;\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n    const context = useContext(TodoDispatchContext);\r\n    if (!context) {\r\n        throw new Error(`Cannot find TodoDispatchContext`);\r\n    }\r\n    return context;\r\n}\r\n\r\nexport function useTodoNextId() {\r\n    const context = useContext(TodoNextIdContext);\r\n    if (!context) {\r\n        throw new Error(`Cannot find TodoNextIdContext`);\r\n    }\r\n    return context;\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n    padding: 48px 32px 24px 32px;\r\n    border-bottom: 1px solid #e9ecef;\r\n\r\n    h1 {\r\n        margin: 0;\r\n        font-size: 36px;\r\n        color: #343a40;\r\n    }\r\n    .day {\r\n        margin-top: 4px;\r\n        color: #868e96;\r\n        font-size: 21px;\r\n    }\r\n    .tasks-left {\r\n        color: #20c997;\r\n        font-size: 18px;\r\n        margin-top: 40px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nfunction TodoHead() {\r\n    const todos = useTodoState();\r\n    const undoneTasks = todos.filter(todo => !todo.done);\r\n\r\n    const today = new Date();\r\n    const dateString = today.toLocaleDateString('ko-KR', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n    });\r\n    const dayName = today.toLocaleDateString('ko-KR', {\r\n        weekday: 'long',\r\n    });\r\n\r\n    return (\r\n        <TodoHeadBlock>\r\n            <h1>{dateString}</h1>\r\n            <div className=\"day\">{dayName}</div>\r\n            <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\r\n        </TodoHeadBlock>\r\n    );\r\n}\r\n\r\nexport default TodoHead;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDone, MdDelete } from 'react-icons/md';\r\nimport { useTodoDispatch } from '../TodoContext';\r\n\r\nconst Remove = styled.div`\r\n    opacity: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #dee2e6;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #ff6b6b;\r\n    }\r\n`;\r\nconst CheckCircle = styled.div`\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 16px;\r\n    border: 1px solid #ced4da;\r\n    font-size: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 20px;\r\n    cursor: pointer;\r\n    ${props =>\r\n        props.done &&\r\n        css`\r\n            border: 1px solid #38d9a9;\r\n            color: #38d9a9;\r\n        `}\r\n`;\r\nconst Text = styled.div`\r\n    flex: 1;\r\n    font-size: 21px;\r\n    color: #495057;\r\n    ${props =>\r\n        props.done &&\r\n        css`\r\n            color: #ced4da;\r\n        `}\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n\r\n    &:hover {\r\n        ${Remove} {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n\r\nfunction TodoItem({ id, done, text }) {\r\n    const dispatch = useTodoDispatch();\r\n    const onToggle = () =>\r\n        dispatch({\r\n            type: 'TOGGLE',\r\n            id,\r\n        });\r\n    const onRemove = () =>\r\n        dispatch({\r\n            type: 'REMOVE',\r\n            id,\r\n        });\r\n    return (\r\n        <TodoItemBlock>\r\n            <CheckCircle done={done} onClick={onToggle}>\r\n                {done && <MdDone />}\r\n            </CheckCircle>\r\n            <Text done={done}>{text}</Text>\r\n            <Remove onClick={onRemove}>\r\n                <MdDelete />\r\n            </Remove>\r\n        </TodoItemBlock>\r\n    );\r\n}\r\n\r\nexport default React.memo(TodoItem);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoListBlock = styled.div`\r\n    flex: 1;\r\n    padding: 20px 32px 48px 32px;\r\n    overflow-y: auto;\r\n`;\r\n\r\nfunction TodoList() {\r\n    const todos = useTodoState();\r\n\r\n    return (\r\n        <TodoListBlock>\r\n            {todos.map(todo => (\r\n                <TodoItem\r\n                    key={todo.id}\r\n                    id={todo.id}\r\n                    text={todo.text}\r\n                    done={todo.done}\r\n                />\r\n            ))}\r\n        </TodoListBlock>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\r\n\r\nconst CircleButton = styled.button`\r\n    background: #38d9a9;\r\n    &:hover {\r\n        background: #63e6be;\r\n    }\r\n    &:active {\r\n        background: #20c997;\r\n    }\r\n\r\n    z-index: 5;\r\n    cursor: pointer;\r\n\r\n    width: 80px;\r\n    height: 80px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 0;\r\n    transform: translate(-50%, 50%);\r\n\r\n    font-size: 60px;\r\n    color: white;\r\n    border-radius: 40px;\r\n\r\n    border: none;\r\n    outline: none;\r\n\r\n    transition: 0.125s all ease-in;\r\n\r\n    ${props =>\r\n        props.open &&\r\n        css`\r\n            background: #ff6b6b;\r\n            &:hover {\r\n                background: #ff8787;\r\n            }\r\n            &:active {\r\n                background: #fa5252;\r\n            }\r\n            transform: translate(-50%, 50%) rotate(45deg);\r\n        `};\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n    width: 100%;\r\n    bottom: 0;\r\n    left: 0;\r\n    position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n    background: #f8f9fa;\r\n    padding: 32px 32px 72px 32px;\r\n    border-bottom-left-radius: 16px;\r\n    border-bottom-right-radius: 16px;\r\n    border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    padding: 12px;\r\n    border-radius: 4px;\r\n    border: 1px solid #dee2e6;\r\n    width: 100%;\r\n    outline: none;\r\n    font-size: 18px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nfunction TodoCreate() {\r\n    const [open, setOpen] = useState(false);\r\n    const [value, setValue] = useState('');\r\n    const dispatch = useTodoDispatch();\r\n    const nextId = useTodoNextId();\r\n\r\n    const onToggle = () => setOpen(!open);\r\n    const onChange = e => setValue(e.target.value);\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            type: 'CREATE',\r\n            todo: {\r\n                id: nextId.current,\r\n                text: value,\r\n                done: false,\r\n            },\r\n        });\r\n        setValue('');\r\n        setOpen(false);\r\n        nextId.current += 1;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {open && (\r\n                <InsertFormPositioner>\r\n                    <InsertForm onSubmit={onSubmit}>\r\n                        <Input\r\n                            placeholder=\"할 일을 입력 후, Enter를 누르세요!\"\r\n                            autoFocus\r\n                            onChange={onChange}\r\n                            value={value}\r\n                        />\r\n                    </InsertForm>\r\n                </InsertFormPositioner>\r\n            )}\r\n            <CircleButton open={open} onClick={onToggle}>\r\n                <MdAdd />\r\n            </CircleButton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(TodoCreate);\r\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoCreate from './components/TodoCreate';\nimport { TodoProvider } from './TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n    background: #e9ecef;\n}`;\n\nfunction App() {\n    return (\n        <TodoProvider>\n            <GlobalStyle />\n            <TodoTemplate>\n                <TodoHead />\n                <TodoList />\n                <TodoCreate />\n            </TodoTemplate>\n        </TodoProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}